* Repositories and Package Management System

  This section of Emacs configuration is concerned with initiating the package manager and adding the needed
  repositories.

#+begin_src emacs-lisp :tangle yes
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;                                                                                                                   ;;
  ;; This Emacs configuration elisp file has been autogenerated from the corresponding file written in Orgmode format. ;;
  ;; Please don't edit this file but edit the original orgmode file to make changes within this file and re-evaluate   ;;
  ;; init.el file to regenerate this file.                                                                             ;;
  ;;                                                                                                                   ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;; Initialize the package manager

  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
	       '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (package-initialize)

  ;; Bootstrap `use-package' as the sole package management tool for
  ;; Emacs. `use-package' customizes everything concerning packages. Refer
  ;; to its documentation for more information.

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)

  ;; When listing Packages within Emacs use `paradox'

  (use-package paradox
    :defer t
    :config
    (progn
      (load (locate-user-emacs-file "paradox-token") :noerror :nomessage))
    (paradox-enable))

#+end_src

-----

* Personal Functions

  This section includes personal functions for different aspects of Emacs
  functionality.

  #+begin_src emacs-lisp :tangle yes

    (use-package dash)
    (use-package dash-functional)

    ;; The next two functions are used to assign web-mode css/html to their
    ;; corresponding buffers when opening filenames with corresponding extensions
    (defun my-check-extension (extension)
      "Check the file extension for the current buffer filename"
      (string= (file-name-extension buffer-file-name) extension))

    (defun my-skewer-enable ()
      "Enables the need skewer-mode file the file extensions html & css"
      (cond ((my-check-extension "html")
	     (skewer-html-mode 1))
	    ((my-check-extension "css")
	     (skewer-css-mode 1)))
      )

    ;; The next two functions configure fira-code font workaround for proper
    ;; Emacs integration.

    (defun my-correct-symbol-bounds (pretty-alist)
      "Prepend a TAB character to each symbol in this alist,
	    this way compose-region called by prettify-symbols-mode
	    will use the correct width of the symbols
	    instead of the width measured by char-width."
      (mapcar (lambda (el)
		(setcdr el (string ?\t (cdr el)))
		el)
	      pretty-alist))

    (defun my-ligature-list (ligatures codepoint-start)
      "Create an alist of strings to replace with
	    codepoints starting from codepoint-start."
      (let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
	(-zip-pair ligatures codepoints)))

    (setq my-fira-code-ligatures
	  (let* ((ligs '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
			 "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
			 "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
			 "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
			 ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
			 "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
			 "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
			 "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
			 ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
			 "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
			 "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
			 "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
			 "x" ":" "+" "+" "*")))
	    (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

    (defun my-set-fira-code-ligatures ()
      (setq prettify-symbols-alist
	    (append my-fira-code-ligatures prettify-symbols-alist))
      (prettify-symbols-mode))

    ;; Assigning ignore-errors macro to functions

					    ;    (defun ignore-error-wrapper (fn)
					    ;     "Function return new function that ignores errors.
					    ;   The function wraps a function with `ignore-errors' macro"
    ;; (lexical-let ((fn fn))
    ;; 	(lambda ()
    ;; 	  (interactive)
    ;; 	  (ignore-errors
    ;; 	    (funcall fn)))))
  #+end_src

-----

* Emacs Initialization and Appearance

  This section of the document includes code for general Emacs initialization
  points including start-screen loading, toolbar, menu-bar, trailing whitespaces
  as well other topics.

#+begin_src emacs-lisp :tangle yes

  ;; Hide Emacs Startup screen

  (setq inhibit-startup-screen t)

  ;; Define and Load a custom file where different customizations written by
  ;; Emacs custmization tool.

  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)

  ;; Disable Toolbar and Menubar

  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; Define default Emacs environment settings

  (set-language-environment "utf-8")
  (set-default-coding-systems 'utf-8)

  ;; Highlight current line globally

  (global-hl-line-mode)

  ;; Show line numbers

  (global-linum-mode)

  ;; Defines the needed ligatures to accurately show Fira Code Font
  ;; that will be defined in `Appearance' section.

  (add-hook 'after-init-hook 'my-set-fira-code-ligatures)

  ;; Set the default font for Emacs

  (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
  (add-to-list 'default-frame-alist
	       '(font . "Fira Code-11"))

  ;; Always indicate empty lines within files and buffers

  (setq default-indicate-empty-lines t)

  ;; Change Default yes-or-no-p to a shorter prompt

  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Make the Editor aware of disk changes for any file opened within Emacs

  (global-auto-revert-mode 1)

#+end_src

** Modeline settings

   This subsection includes tweaks for modeline-related settings.

#+begin_src emacs-lisp :tangle yes

  ;; Use `diminish' to diminish minor modes from mode line to save space

  (use-package diminish
    :diminish abbrev-mode
    :diminish auto-fill-function)

  ;; Use `uniquify' to give meaningful names for buffers with the same name

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*") ;; don't muck with special buffers

  ;; more useful frame title, that show either a file or a
  ;; buffer name (if the buffer isn't visiting a file)

  (setq frame-title-format
	'("" invocation-name " - "
	  (:eval (if (buffer-file-name)
		     (abbreviate-file-name (buffer-file-name))
		   "%b"))))

#+end_src

** Visual settings within buffers

   This subsection controls settings within the buffer window itself.

#+begin_src emacs-lisp :tangle yes

  ;; Use `whitespace' to visualise whitespace

  (use-package whitespace
    :diminish whitespace-mode)

  ;; Turn off highlight long lines

  (setq whitespace-line-column 10000)

  ;; Use `volatile-highlights' to highlight changes from pasting, ...etc.

  (use-package volatile-highlights
    :diminish volatile-highlights-mode
    :config
    (volatile-highlights-mode t))

  ;; rainbow-mode - colourise colours in the buffer
  (use-package rainbow-mode)

  ;; rainbow-delimiters - show matching brackets etc
  (use-package rainbow-delimiters
    :config
    (setq global-rainbow-delimiters-mode 1))

  ;; show page breaks
  (use-package page-break-lines
    :diminish page-break-lines-mode
    :config
    (global-page-break-lines-mode 1)
    (setq page-break-lines-modes '(emacs-lisp-mode lisp-mode scheme-mode compilation-mode outline-mode help-mode org-mode ess-mode latex-mode)))

  ;; scroll buffer if cursor is this many lines from the top or bottom
  (setq scroll-margin 3)

#+end_src

** Themes

   This subsection is concerned with downloading different themes and
   assigning a default theme for Emacs.

#+begin_src emacs-lisp :tangle yes

  ;; Download the themes of your choice
  (use-package solarized-theme
    :config
    (setq solarized-distinct-fringe-background t)
    (setq solarized-use-variable-pitch nil)
    (setq solarized-high-contrast-mode-line t)
    (setq solarized-use-less-bold t)
    (setq solarized-use-more-italic t)
    (setq solarized-emphasize-indicators t)
    (setq solarized-scale-org-headlines nil)
    (setq solarized-height-minus-1 1.0)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq x-underline-at-descent-line t))

  (use-package intellij-theme)
  (use-package labburn-theme)
  (use-package abyss-theme)
  (use-package underwater-theme)
  (use-package color-theme)
  (use-package color-theme-cobalt)


  ;; Set the theme you want

  (use-package powerline)

  (use-package airline-themes
    :init
    (progn
      (require 'airline-themes)
      (airline-themes-set-modeline)))

  ;;(use-package airline-themes
  ;;  :init
  ;;  (progn
  ;;    (require 'airline-themes)
  ;;    (load-theme 'airline-light)))

  (use-package material-theme)

  (load-theme 'material)

#+end_src

-----

* Extending Emacs Functionality

  This section of Emacs configuration is concerned with adding various tools which aim at increasing
  Emacs default functionality to new horizons.

** General extensions

   This subsection takes care of the general extensions features

   #+begin_src emacs-lisp :tangle yes

     ;; Always reveal the pairing symbol (brackets mainly +/- others)

     (show-paren-mode t)

     ;; Enable entering brackets, quotes, double-quotes and other symbols in pairs

     (electric-pair-mode t)

     ;; Use `all-the-icons' package and its daughter packages for showing icons for files within dired and File navigation pane (neotree or treemacs)

     (use-package all-the-icons)
     (use-package all-the-icons-dired)
     (use-package all-the-icons-gnus)
     (use-package all-the-icons-ivy)


   #+end_src

** Auto-completion

   This subsection is concerned with autocompletion tools configuration.

  #+begin_src emacs-lisp :tangle yes

    ;; Use `ivy' minibuffer completion tool for autocompletion within minibuffers

    (use-package ivy
      :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      :init
      (ivy-mode 1))

    (use-package ivy-hydra)

    (use-package counsel)

    (use-package counsel-projectile)

    (use-package counsel-pydoc)


    ;; Use `company-mode' for in-buffer autocompletion. Company Mode has many backends.
    ;; These will be configured in here as well.

    (use-package company
      :config
      (add-hook 'after-init-hook 'global-company-mode)
      (add-hook 'csharp-mode-hook #'company-mode)
      :bind
      ("M-C-<space>" . 'company-complete))

    (use-package company-anaconda)

    (use-package company-auctex)

    (use-package company-web
      :config
      (add-to-list 'company-backends 'company-web))

    ;; (use-package company-php
    ;;   :config
    ;;   (add-to-list 'company-backends 'company-php))

    (use-package company-tern)

    (use-package auto-complete)


  #+end_src

** Snippets system

   This subsection is concered with configuring the snippets system to used in Emacs

#+begin_src emacs-lisp :tangle yes

  (use-package yasnippet)
  ;;   :defer t
  ;;   :hook
  ;;   (prog-mode text-mode org-mode))

  (use-package yasnippet-snippets)
  ;;   :defer t)

#+end_src

** Spell-cheking and Syntax-checking

   This subsection of Emacs configuration is concered with spell checking.

#+begin_src emacs-lisp :tangle yes

  ;; Install & Enable `flycheck' as the default syntax checking tool for Emacs

  (use-package flycheck
    :config
    (add-hook 'prog-mode-hook 'flycheck-mode))

  ;; Configure `flyspell'

  (use-package flyspell
    :config
    (flyspell-mode t))

#+end_src

** Multiple cursor selection

#+begin_src emacs-lisp :tangle yes

  ;; Install and Configure `multiple-cursors'

  (use-package multiple-cursors)

#+end_src

** Version Control system

#+begin_src emacs-lisp :tangle yes

  ;; Install and Enable `magit' for managing Git version control system

  (use-package magit
    :defer t)

  (use-package magit-gh-pulls
    :defer t)

  (use-package magit-gitflow
    :defer t)

  (use-package magit-imerge
    :defer t)

  (use-package magithub
    :defer t)

#+end_src

** File manager Configuration

#+begin_src emacs-lisp :tangle yes

  ;; Use `neotree' as a sidebar-like file manager

  (use-package neotree
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    :bind
    ([f3] . neotree-toggle))

#+end_src

** Communication

   This subsection of Emacs configuration is concerned with settings related
   to communications and messaging

 #+begin_src emacs-lisp :tangle yes

   ;; Load the erc irc configuration file

   (load "~/.emacs.d/.ercrc.el")

   ;; Use `erc-colorize' erc extension package

   (use-package erc-colorize
     :defer t
     :config
     (erc-colorize-mode 1))

 #+end_src

** Buffer splitting navigation

   This subsection deals with assigning keybindings for faster moving between
splitted buffers

#+begin_src emacs-lisp :tangle yes

  ;; Use `windmove' to fastly switch to buffers

  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
  ;; (global-set-key [s-left] (ignore-error-wrapper 'windmove-left))
  ;; (global-set-key [s-right] (ignore-error-wrapper 'windmove-right))
  ;; (global-set-key [s-up] (ignore-error-wrapper 'windmove-up))
  ;; (global-set-key [s-down] (ignore-error-wrapper 'windmove-down))

#+end_src

** Session management

#+begin_src emacs-lisp :tangle yes

  ;; Use `session' package to save various settings between sessions

  (use-package session
    :init
    (add-hook 'after-init-hook 'session-initialize))

#+end_src

** Recent Files management

   This subsection configures how frequently to save recent files

#+begin_src emacs-lisp :tangle yes

  ;; Configure `recentf' behaviour

  (use-package recentf
    :config
    (progn
      ;; save every 60 minutes
      (run-at-time nil (* 60 60) 'recentf-save-list)
      (setq recentf-max-saved-items 1000
	    recentf-auto-cleanup 'never
	recentf-exclude '("/ssh:"))
      (recentf-mode t)))

#+end_src

-----

* Programming Languages support

  This section is concerned with configuration of different programming languages as well
  as well other programming issues.

#+BEGIN_SRC emacs-lisp :tangle yes

  (add-hook 'prog-mode-hook 'my-set-fira-code-ligatures)

#+END_SRC

** Project management

#+begin_src emacs-lisp :tangle yes

  (use-package projectile)

#+end_src

** Workspace management

#+begin_src emacs-lisp :tangle yes

#+end_src

** Python language support

#+begin_src emacs-lisp :tangle yes

  (use-package elpy
    :config
    (when (require 'flycheck nil t)
      (setq elpy-modules (delq 'elpy-module-flake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))
    )
   (elpy-enable)

  (use-package py-autopep8
    :config
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

  (use-package ein
    :config
      (setq python-shell-interpreter "ipython"
	  python-shell-interpreter-arg "-i --simple-prompt"))

#+end_src

** HTML / CSS

   This section is concerned with configuring emacs for faster html and css
   editing.

#+begin_src emacs-lisp :tangle yes

  ;; Use `web-mode' for HTML/CSS editing and other web development features.

  (use-package web-mode
    :ensure t
    :init
    (setq web-mode-enable-current-element-highlight t
	  web-mode-enable-current-column-highlight t)
    :mode
    (("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode)
     ("\\.html?\\'" . web-mode)
     ("\\.css\\'" . web-mode))
    :config
    (setq  web-mode-markup-indent-offset 2
	   web-mode-css-indent-offset 2
	   web-mode-code-indent-offset 2
	   web-mode-style-padding 1
	   web-mode-script-padding 1
	   web-mode-block-padding 0
	   web-mode-enable-auto-pairing t
	   web-mode-enable-css-colorization t
	   web-mode-enable-part-face t
	   web-mode-comment-keywords t
	   web-mode-enable-heredoc-fontification t)
    (set-face-attribute 'web-mode-css-at-rule-face nil :foreground "Pink3")
    )

  ;; Configure Emmet-mode and attach it to Web-mode.

  (use-package emmet-mode
    :ensure t
    :config
    (setq emmet-self-closing-tag-style "")
    :hook (web-mode))


  ;; Configure Skewer-mode

  (use-package skewer-mode
    :ensure t
    :init
    (add-hook 'web-mode-hook 'my-skewer-enable)
    :hook
    (web-mode))

  (use-package impatient-mode
    :ensure t
    :hook
    (web-mode))

  (use-package lorem-ipsum)

#+end_src

** Vanilla Javascript Support

   This subsection configures Emacs for extended Vanilla Javascript
support.

#+begin_src emacs-lisp :tangle yes

  ;; Install and configure `js2-mode', `ac-js2'

  (use-package js2-mode
    :mode
    ("\\.js\\'" . js2-mode))

  (use-package ac-js2
    :config
    (add-to-list 'company-backends 'ac-js2-company))

  (use-package tern
    :config
    (add-to-list 'company-backends 'company-tern)
    (add-hook 'js2-mode-hook (lambda () (tern-mode)(company-mode))))

#+end_src

** PHP Language Support

   This subsection configures Emacs for PHP language support. Further
configuration will be done later.

#+begin_src emacs-lisp :tangle yes

  (use-package php-mode)
  (use-package php-extras)
  (use-package php-eldoc)
  (use-package php-runtime)
  (use-package php-scratch)

#+end_src

** YAML Support

   This subsection adds support for yaml markup language

#+begin_src emacs-lisp :tangle yes

  (use-package yaml-mode
    :mode
    ("\\.yml\\'" . yaml-mode))

#+end_src

** Common Lisp Language Support

   This subsection adds support and features for Lisp language

#+begin_src emacs-lisp :tangle yes

  ;; (use-package slime)
  ;; (use-package slime-repl)
  ;; (use-package slime-company)

#+end_src

** Intellisense Support

   This subsection is concerned with intellisense support for Emacs

#+begin_src emacs-lisp :tangle yes

  (use-package omnisharp
    :config
    (add-to-list 'company-backends #'company-omnisharp)
    (add-hook 'csharp-mode-hook 'omnisharp-mode))

#+end_src
