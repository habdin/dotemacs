* Emacs initialization

  This section is concerned with emacs package management, initialization and
  appearance.

** Repository definition

   Package initialization of emacs configuration file.
   
#+begin_src emacs-lisp :tangle yes

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; This Emacs configuration elisp file has been autogenerated from the corresponding ;;
  ;; file written in Org-mode format. Please don't edit this file by hand instead      ;;
  ;; edit and make cnanges in the original Org mode file and re-evaluate the init.el   ;;
  ;; emacs buffer to regenerate this file.					     ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;; Initialize the package manager

  (load "~/.config/emacs/config.d/repoconf.el")

#+end_src

** Use-package bootstrap

   Bootstrap `use-package' as the sole package management tool for Emacs in this
   section of Emacs configuration. Refer to `use-package' online documentation
   for more information on how to use it.

#+begin_src emacs-lisp :tangle yes

  ;; Bootstrap `use-package'

  (load "~/.config/emacs/config.d/pkgmgr.el")

#+end_src

** Paradox package listing

   Use `Paradox' when listing packages from within Emacs.

#+begin_src emacs-lisp :tangle yes

  (load "~/.config/emacs/config.d/pkglstmgr.el")

#+end_src

** Personal information

   Set up your personal information settings. These are useful for many emacs packages.
   
#+begin_src emacs-lisp :tangle yes

     (load "~/.config/emacs/config.d/personal-info.el")

#+end_src

** My Lisp function definitions

   This subsection includes my lisp function definitions that extend Emacs functio-
   ality.

#+begin_src emacs-lisp :tangle yes

  (load "~/.config/emacs/config.d/myfunctions.el")

#+end_src

** Themes

   This subsection is concerned with download various themes for Emacs and
   assigning one to Emacs.

#+begin_src emacs-lisp :tangle yes

  (load "~/.config/emacs/config.d/themes-conf.el")

#+end_src
   
** Modeline settings

   This subsection include tweaks for modeline-related settings

#+begin_src emacs-lisp :tangle yes

  (load "~/.config/emacs/config.d/modeline-conf.el")

#+end_src

** Visual buffer settings

   This subsection controls settings within the buffer window itself including
   the toolbar, menubar, scrollbars and other buffer and frame settings.

#+begin_src emacs-lisp :tangle yes

  ;; Configure various visual settings within Emacs buffers and frames

  (load "~/.config/emacs/config.d/buffer-conf.el")

#+end_src

* Extending Emacs Functionality

    This section of Emacs configuration is concerned with adding various tools which aim at increasing
    Emacs default functionality to new horizons.

** General extensions

   In this subsection, general extensions are added

#+begin_src emacs-lisp :tangle yes

  ;; Add brackets pairing behaviour, icons for dired/speedbar/others

  (load "~/.config/emacs/config.d/general-extensions-conf.el")

#+end_src

** Auto-completion

   In this subsection, auto-complete packages are added for minibuffer and the
   emacs buffer itself.

#+begin_src emacs-lisp :tangle yes

  ;; Add minibuffer completion feature and in-buffer completion feature

  (load "~/.config/emacs/config.d/autocompletion-conf.el")

#+end_src

** Snippets system

   Within this subsection snippets system functionality is added to Emacs.

#+begin_src emacs-lisp :tangle yes

  ;; Configure snippets system

  (load "~/.config/emacs/config.d/snippets-conf.el")

#+end_src

** Spell-checking and syntax-checking features

   This subsection is concerned with spell and syntax checking

#+begin_src emacs-lisp :tangle yes

  ;; Enabling spell-checking and syntax-checking within Emacs buffers

  (load "~/.config/emacs/config.d/checkers-conf.el")

#+end_src

** Multiple cursor selection

   This subsection adds multiple cursor functionality to Emacs
   
#+begin_src emacs-lisp :tangle yes

  ;; Add multiple cursors functionality

  (load "~/.config/emacs/config.d/multiple-cursors.el")

#+end_src

** Version Control system

   Add Git functionality to Emacs through `magit'

#+begin_src emacs-lisp :tangle yes

  ;; Add Git VCS functionality through `magit'

  (load "~/.config/emacs/config.d/git-conf.el")
  
#+end_src

** Advanced File management

   Add advance file management functionality to Emacs

#+begin_src emacs-lisp :tangle yes

  ;; Use `neotree' as sidebar file manager

  (load "~/.config/emacs/config.d/filemanager-conf.el")

#+end_src

** Communication

   Add configuration for messaging and chat abilities for Emacs

#+begin_src emacs-lisp :tangle yes

  ;; Erc configuration

  (load "~/.config/emacs/config.d/irc-conf.el")

#+end_src

** Intelligent Buffer management

   Add intelligent buffer management through use of `ace-window'.

#+begin_src emacs-lisp :tangle yes

  ;; Use and Configure `ace-window' as a buffer-splitting and shifting tool

  (load "~/.config/emacs/config.d/buffermanager-conf.el")

#+end_src

** Session management

   Add session management to save various settings between sessions

#+begin_src emacs-lisp :tangle yes

  ;; Session manager configuration

  (load "~/.config/emacs/config.d/session-conf.el")

#+end_src

** Recent Files management

   This subsection configures how frequently to save recent files

#+begin_src emacs-lisp :tangle yes

  ;; Configure Recent files management behaviour

  (load "~/.config/emacs/config.d/recent-files-conf.el")

#+end_src

* Programming Languages support

  This section is concerned with configuration of different programming languages as well
  as well other programming issues.

#+begin_src emacs-lisp :tangle yes

  ;; Add support for Fira-code ligatures to programming mode

  (load "~/.config/emacs/config.d/general-programming-conf.el")

#+end_src

** Project management

#+begin_src emacs-lisp :tangle yes

  (use-package projectile)

#+end_src

** Workspace management

#+begin_src emacs-lisp :tangle yes

#+end_src

** Python language support

#+begin_src emacs-lisp :tangle yes

  (use-package elpy
    :config
    (when (require 'flycheck nil t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))
    )
   (elpy-enable)

   (use-package py-autopep8
    :config
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

  (use-package ein
    :config
      (setq python-shell-interpreter "ipython"
            python-shell-interpreter-arg "-i --simple-prompt"))

#+end_src

** HTML / CSS

   This section is concerned with configuring emacs for faster html and css
   editing.

#+begin_src emacs-lisp :tangle yes

  ;; Use `web-mode' for HTML/CSS editing and other web development features.

  (use-package web-mode
    :ensure t
    :init
    (setq web-mode-enable-current-element-highlight t
	  web-mode-enable-current-column-highlight t)
    :mode
    (("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode)
     ("\\.html?\\'" . web-mode)
     ("\\.css\\'" . web-mode))
    :config
    (setq  web-mode-markup-indent-offset 2
	   web-mode-css-indent-offset 2
	   web-mode-code-indent-offset 2
	   web-mode-style-padding 1
	   web-mode-script-padding 1
	   web-mode-block-padding 0
	   web-mode-enable-auto-pairing t
	   web-mode-enable-css-colorization t
	   web-mode-enable-part-face t
	   web-mode-comment-keywords t
	   web-mode-enable-heredoc-fontification t)
    (set-face-attribute 'web-mode-css-at-rule-face nil :foreground "Pink3")
    )

  ;; Configure Emmet-mode and attach it to Web-mode.

  (use-package emmet-mode
    :ensure t
    :config
    (setq emmet-self-closing-tag-style "")
    :hook (web-mode))


  ;; Configure Skewer-mode

  (use-package skewer-mode
    :ensure t
    :init
    (add-hook 'web-mode-hook 'my-skewer-enable)
    :hook
    (web-mode))

  (use-package impatient-mode
    :ensure t
    :hook
    (web-mode))

  (use-package lorem-ipsum)

#+end_src

** Vanilla Javascript Support

   This subsection configures Emacs for extended Vanilla Javascript
support.

#+begin_src emacs-lisp :tangle yes

  ;; Install and configure `js2-mode', `ac-js2'

  (use-package js2-mode
    :mode
    ("\\.js\\'" . js2-mode))

  (use-package ac-js2
    :config
    (add-to-list 'company-backends 'ac-js2-company))

  (use-package tern
    :config
    (add-to-list 'company-backends 'company-tern)
    (add-hook 'js2-mode-hook (lambda () (tern-mode)(company-mode))))

#+end_src

** PHP Language Support

   This subsection configures Emacs for PHP language support. Further
configuration will be done later.

#+begin_src emacs-lisp :tangle yes

  (use-package php-mode)
  (use-package php-extras)
  (use-package php-eldoc)
  (use-package php-runtime)
  (use-package php-scratch)

#+end_src

** YAML Support

   This subsection adds support for yaml markup language

#+begin_src emacs-lisp :tangle yes

  (use-package yaml-mode
    :mode
    ("\\.yml\\'" . yaml-mode))

#+end_src

** Common Lisp Language Support

   This subsection adds support and features for Lisp language

#+begin_src emacs-lisp :tangle yes

  ;; (use-package slime)
  ;; (use-package slime-repl)
  ;; (use-package slime-company)

#+end_src

** Intellisense Support

   This subsection is concerned with intellisense support for Emacs

#+begin_src emacs-lisp :tangle yes

  (use-package omnisharp
    :config
    (add-hook 'csharp-mode-hook 'omnisharp-mode)
    )

#+end_src
