* Packages and Repos

#+begin_src emacs-lisp

  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives
	       '("org" . "http://orgmode.org/elpa/" ))
  (add-to-list 'package-archives 
	       '("marmalade" . "http://marmalade-repo.org/packages/"))
  (package-initialize)
  (when (not package-archive-contents)
    (package-refresh-contents))

  ;; Start using paradox as Package manager
  (use-package paradox
    :ensure t
    :defer t
    :config
    (progn
      (load (locate-user-emacs-file "paradox-token") :noerror :nomessage))
    (paradox-enable))

#+end_src

* General Initialization

#+begin_src emacs-lisp

  (setq inhibit-startup-screen t) ;; hide the startup message
  (setq custom-file "~/.emacs.d/custom.el") ;; set where to save customizations
  (load custom-file)
  (flyspell-mode t) ;; enable spell checking via flyspell
  (add-hook 'after-init-hook 'global-company-mode) ;; enable auto-completion globally via company-mode)
  (add-hook 'after-init-hook 'my-set-fira-code-ligatures)
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (show-paren-mode t)
  (electric-pair-mode t)
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/ecb") ;; for Emacs code browser configuration
  (require 'ecb) ;; for Emacs code browser configuration
  (all-the-icons-ivy-setup)
  (global-auto-revert-mode 1)
  (use-package dash
    :ensure t)

#+end_src

* Personal functions

This is where I add my personal functions for Emacs

#+begin_src emacs-lisp

  (defun my-check-extension (extension) 
    "Check the file extension for the current buffer filename"
    (string= (file-name-extension buffer-file-name) extension))

  (defun my-skewer-enable ()
    "Enables the needed skewer-mode for the file extension"	
    (cond ((my-check-extension "html")
	   (skewer-html-mode 1))
	  ((my-check-extension "css")
	   (skewer-css-mode 1))
	  ))

  (defun my-correct-symbol-bounds (pretty-alist)
    "Prepend a TAB character to each symbol in this alist,
    this way compose-region called by prettify-symbols-mode
    will use the correct width of the symbols
    instead of the width measured by char-width."
    (mapcar (lambda (el)
	      (setcdr el (string ?\t (cdr el)))
	      el)
	    pretty-alist))

  (defun my-ligature-list (ligatures codepoint-start)
    "Create an alist of strings to replace with
    codepoints starting from codepoint-start."
    (let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
      (-zip-pair ligatures codepoints)))
  (setq my-fira-code-ligatures
	(let* ((ligs '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
		       "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
		       "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
		       "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
		       ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
		       "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
		       "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
		       "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
		       ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
		       "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
		       "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
		       "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
		       "x" ":" "+" "+" "*")))
	  (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

  (defun my-set-fira-code-ligatures ()
    (setq prettify-symbols-alist 
	  (append my-fira-code-ligatures prettify-symbols-alist))
    (prettify-symbols-mode))
#+end_src

* Appearance

** Theming

#+begin_src emacs-lisp

  ;; (setq solarized-distinct-fringe-background t) ;; make the fringe stand out from the background
  ;; (setq solarized-use-variable-pitch nil) ;; Don't change the font for some headings and titles
  ;; (setq solarized-high-contrast-mode-line t) ;; make the modeline high contrast
  ;; (setq solarized-use-less-bold t) ;; Use less bolding
  ;; (setq solarized-use-more-italic t) ;; Use more italics
  ;; (setq solarized-emphasize-indicators t) ;; Use less colors for indicators such as git:gutter, flycheck and similar
  ;; (setq solarized-scale-org-headlines nil) ;; Don't change size of org-mode headlines (but keep other size-changes)

  ;; ;; Avoid all font-size changes

  ;; (setq solarized-height-minus-1 1.0) 
  ;; (setq solarized-height-plus-1 1.0)
  ;; (setq solarized-height-plus-2 1.0)
  ;; (setq solarized-height-plus-3 1.0)
  ;; (setq solarized-height-plus-4 1.0)
  ;; (setq x-underline-at-descent-line t)

  ;; (load-theme 'solarized-dark)

  (load-theme 'wombat)

  (use-package powerline 
    :ensure t)

  (use-package airline-themes
    :ensure t
    :init
    (progn   
      (require 'airline-themes)
      (load-theme 'airline-wombat))
    )

#+end_src

** Other settings  

#+begin_src emacs-lisp

  (global-hl-line-mode)
  (global-linum-mode)
  (tool-bar-mode -1)
  (when (window-system)
    (set-default-font "Fira Code 11"))

  ;; (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
  ;; 	       (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
  ;; 	       (36 . ".\\(?:>\\)")
  ;; 	       (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
  ;; 	       (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
  ;; 	       (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
  ;; 	       (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
  ;; 	       (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
  ;; 	       (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
  ;; 	       (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
  ;; 	       (48 . ".\\(?:x[a-zA-Z]\\)")
  ;; 	       (58 . ".\\(?:::\\|[:=]\\)")
  ;; 	       (59 . ".\\(?:;;\\|;\\)")
  ;; 	       (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
  ;; 	       (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
  ;; 	       (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
  ;; 	       (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
  ;; 	       (91 . ".\\(?:]\\)")
  ;; 	       (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
  ;; 	       (94 . ".\\(?:=\\)")
  ;; 	       (119 . ".\\(?:ww\\)")
  ;; 	       (123 . ".\\(?:-\\)")
  ;; 	       (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
  ;; 	       (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
  ;; 	       )
  ;; 	     ))
  ;;   (dolist (char-regexp alist)
  ;;     (set-char-table-range composition-function-table (car char-regexp)
  ;;			    `([,(cdr char-regexp) 0 font-shape-gstring]))))

  (setq default-indicate-empty-lines t)

#+end_src

* Communication

This portion of emacs configuration include all settings that are related to communications.

** IRC client settings

#+begin_src emacs-lisp

  (load "~/.emacs.d/.ercrc.el")
  (erc-colorize-mode 1)

#+end_src

* Programming

#+begin_src emacs-lisp

  (add-hook 'prog-mode-hook 'my-set-fira-code-ligatures #'rainbow-delimiters-mode)
  (use-package projectile
    :ensure t)

#+end_src

** Python

#+begin_src emacs-lisp

  (elpy-enable)
  (setq python-shell-interpreter "ipython"
	python-shell-interpreter-arg "-i --simple-prompt")

  ;; use flycheck not flymake with elpy
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; enable autopep8 formatting on save
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

#+end_src

** WebDev
   This section is used for various web development settings including HTML, CSS and others.

#+begin_src emacs-lisp

  ;; Using web-mode for different WebDev purposes

  (use-package web-mode
    :ensure t
    :init
    (setq web-mode-enable-current-element-highlight t
	  web-mode-enable-current-column-highlight t)	
    :mode
    (("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode)
     ("\\.html?\\'" . web-mode)
     ("\\.css\\'" . web-mode))
    :config
    (setq  web-mode-markup-indent-offset 2
	   web-mode-css-indent-offset 2
	   web-mode-code-indent-offset 2
	   web-mode-style-padding 1
	   web-mode-script-padding 1
	   web-mode-block-padding 0
	   web-mode-enable-auto-pairing t
	   web-mode-enable-css-colorization t
	   web-mode-enable-part-face t
	   web-mode-comment-keywords t
	   web-mode-enable-heredoc-fontification t)
    (set-face-attribute 'web-mode-css-at-rule-face nil :foreground "Pink3")
    )

  ;; Configure Emmet-mode and attach it to Web-mode.

  (use-package emmet-mode
    :ensure t
    :config
    (setq emmet-self-closing-tag-style "")
    :hook (web-mode))


  ;; Configure Skewer-mode

  (use-package skewer-mode
    :ensure t
      :init 
      (add-hook 'web-mode-hook 'my-skewer-enable)
      :hook
      (web-mode))

  (use-package impatient-mode
    :ensure t
    :hook
    (web-mode))

  (use-package ac-js2
    :ensure t
    :config
    (add-hook 'company-backends 'ac-js2))

  (use-package company-tern
    :ensure t
    :config
    (add-to-list 'company-backends 'company-tern))

  (use-package js2-mode
    :ensure t
    :mode
    ("\\.js\\'" . js2-mode))

  (use-package company-tern
    :ensure t
    :config
    (add-to-list 'company-backends 'company-tern))

#+end_src

** YAML

#+begin_src emacs-lisp

  (use-package yaml-mode
    :ensure t
    :mode
    ("\\.yml\\'" . yaml-mode))

#+end_src

* Miscellaneous

** Tree-like file explorer
This is a tool to be used for various purposes.

#+begin_src emacs-lisp

  (use-package treemacs
    :ensure t
    :config
    (progn
      (setq treemacs-change-root-without-asking nil
	    treemacs-collapse-dirs (if (executable-find "python")3 0)
	    treemacs-file-event-delay 5000
	    treemacs-follow-after-init t
	    treemacs-follow-recenter-distance 0.1
	    treemacs-goto-tag-strategy          'refetch-index
	    treemacs-indentation                2
	    treemacs-indentation-string         " "
	    treemacs-is-never-other-window      nil
	    treemacs-never-persist              nil
	    treemacs-no-png-images              nil
	    treemacs-recenter-after-file-follow nil
	    treemacs-recenter-after-tag-follow  nil
	    treemacs-silent-filewatch           nil
	    treemacs-silent-refresh             nil
	    treemacs-sorting                    'alphabetic-desc
	    treemacs-tag-follow-cleanup         t
	    treemacs-tag-follow-delay           1.5
	    treemacs-width                      35)
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (pcase (cons (not (null (executable-find "git")))
		   (not (null (executable-find "python3"))))
	(`(t . t)
	 (treemacs-git-mode 'extended))
	(`(t . _)
	 (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
	  ([f8] . treemacs-toggle)
	  ("M-0"        . treemacs-select-window)
	  ("C-c 1"      . treemacs-delete-other-windows)
	  ("M-m ft"     . treemacs-toggle)
	  ("M-m fT"     . treemacs)
	  ("M-m fB"     . treemacs-bookmark)
	  ("M-m f C-t"  . treemacs-find-file)
	  ("M-m f M-t"  . treemacs-find-tag))
    )

  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header)
    )

#+end_src

** Others

#+begin_src emacs-lisp

    (fset 'yes-or-no-p 'y-or-n-p)
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
    
#+end_src
